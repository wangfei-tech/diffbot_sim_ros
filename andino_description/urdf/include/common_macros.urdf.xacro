<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:macro name="wheel"
               params="prefix reflect wheel_props base_props ">

  <xacro:property name="pos_x_joint"
     value="${(base_props['base']['x_size']/2) - wheel_props['x_offset']}"/>
  <xacro:property name="pos_y_joint"
    value="${(base_props['base']['y_size']/2) + wheel_props['y_offset'] + (wheel_props['length']/2)}"/>
  <xacro:property name="pos_z_joint" value="${wheel_props['z_offset']}"/>

    <link name="${prefix}_wheel">
    <xacro:if value="${wheel_props['mesh'] != '' }" >
      <visual>
        <origin xyz="0.0 0 0" rpy="${pi/2} 0 ${pi/2.0*(reflect - 1)}"/>
        <geometry>
          <xacro:if value="${wheel_props['scale'] == '' }" >
            <mesh filename="package://andino_description/meshes/${robot_name}/${wheel_props['mesh']}" />
          </xacro:if>
          <xacro:unless value="${wheel_props['scale'] == '' }" >
            <mesh filename="package://andino_description/meshes/${robot_name}/${wheel_props['mesh']}" scale="${wheel_props['scale']}" />
          </xacro:unless>
        </geometry>
        <material name="dark_grey"/>
      </visual>
    </xacro:if>
    <xacro:if value="${wheel_props['mesh'] == '' }" >
      <visual>
        <origin xyz="0.0 0 0" rpy="${pi/2} 0 0"/>
         <geometry>
         <cylinder radius="${wheel_props['radius']}" length="${wheel_props['length']}"/>
        </geometry>
        <material name="red"/>
      </visual>
    </xacro:if>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_props['radius']}" length="${wheel_props['length']}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="${wheel_props['mass']}"
                              r="${wheel_props['radius']}"
                              l="${wheel_props['length']}"
                              o_xyz="0.0 0.0 0.0"
                              o_rpy="${pi/2.0} 0.0 0.0" >
      </xacro:cylinder_inertia>
    </link>


    <joint name="${prefix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${pos_x_joint} ${reflect* pos_y_joint} ${pos_z_joint}" rpy="0 0 0"/>
      <dynamics damping="0.01" friction="0.0"/>
    </joint>

  </xacro:macro>

  <xacro:macro name="motor"
               params="prefix reflect motor_props base_props ">

  <xacro:property name="pos_x_joint"
     value="${(base_props['base']['x_size']/2) - motor_props['x_offset']}"/>
  <xacro:property name="pos_y_joint"
    value="${(base_props['base']['y_size']/2) + motor_props['y_offset'] + (motor_props['y_size']/2)}"/>
  <xacro:property name="pos_z_joint" value="${motor_props['z_offset']}"/>

    <link name="${prefix}_motor">
    <xacro:if value="${motor_props['mesh'] != '' }" >
      <visual>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0 ${pi/2.0*(reflect - 1)}"/>
        <geometry>
          <xacro:if value="${motor_props['scale'] == '' }" >
            <mesh filename="package://andino_description/meshes/${robot_name}/${motor_props['mesh']}" />
          </xacro:if>
          <xacro:if value="${motor_props['scale'] != '' }" >
            <mesh filename="package://andino_description/meshes/${robot_name}/${motor_props['mesh']}" scale="${motor_props['scale']}"/>
          </xacro:if>
        </geometry>
        <material name="light_blue"/>
      </visual>
    </xacro:if>
    <xacro:if value="${motor_props['mesh'] == '' }" >
      <visual>
        <origin xyz="0.0 0 0" rpy="${pi/2} 0 0"/>
         <geometry>
          <box size="${motor_props['x_size']} ${motor_props['y_size']} ${motor_props['z_size']}"/>
        </geometry>
        <material name="red"/>
      </visual>
    </xacro:if>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <box size="${motor_props['x_size']} ${motor_props['y_size']} ${motor_props['z_size']}"/>
        </geometry>
      </collision>
      <xacro:box_inertia m="${motor_props['mass']}"
                         x="${motor_props['x_size']}"
                         y="${motor_props['y_size']}"
                         z="${motor_props['z_size']}">
      </xacro:box_inertia>
    </link>

    <joint name="${prefix}_motor_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_motor"/>
      <origin xyz="${pos_x_joint} ${reflect* pos_y_joint} ${pos_z_joint}" rpy="0 ${-pi/2.0*(reflect - 1)} 0"/>
      <axis xyz="0 1 0" rpy="0 0 0" />
    </joint>

  </xacro:macro>

  <xacro:macro name="base"
               params="link_name:='base_link' base_prop mesh:='' scale:='' *origin ">
    <link name="${link_name}">
    <xacro:box_inertia m="${base_prop['base']['mass']}"
                       x="${base_prop['base']['x_size']}"
                       y="${base_prop['base']['y_size']}"
                       z="${base_prop['base']['z_size']}"> 
    </xacro:box_inertia>
    <xacro:if value="${mesh != '' }" >
      <visual>
        <xacro:insert_block name="origin" />
        <geometry>
          <xacro:if value="${scale != '' }" >
            <mesh filename="package://andino_description/meshes/${robot_name}/${mesh}" scale="${scale}"/>
          </xacro:if>
          <xacro:if value="${scale == '' }" >
            <mesh filename="package://andino_description/meshes/${robot_name}/${mesh}" />
          </xacro:if>
        </geometry>
        <material name="blue" />
      </visual>
    </xacro:if>
    <xacro:if value="${mesh == '' }" >
      <visual>
        <xacro:insert_block name="origin" />
        <geometry>
          <box size="${base_prop['base']['x_size']} ${base_prop['base']['y_size']} ${base_prop['base']['z_size']}"/>
        </geometry>
        <material name="blue" />
      </visual>
    </xacro:if>
    <collision>
      <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
      <geometry>
        <box size="${base_prop['base']['x_size']} ${base_prop['base']['y_size']} ${base_prop['base']['z_size']}"/>
      </geometry>
    </collision>
    </link>
  </xacro:macro>

  <xacro:macro name="footprint"
               params="wheel_props">

    <link name="base_footprint" />


    <joint name="base_footprint_joint" type="fixed">
      <parent link="base_link"/>
      <child link="base_footprint" />
      <origin xyz="0 0 ${-(wheel_props['radius'] - wheel_props['z_offset'])}" rpy="0 0 0" />
    </joint>
  </xacro:macro>
  <xacro:macro name="cylinder_inertia" params="m r l o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+l*l)/12}" ixy = "0" ixz = "0" 
               iyy="${m*(3*r*r+l*l)/12}" iyz = "0" izz="${m*r*r/2}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>


 <xacro:macro name="box_inertia" params="m x y z o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (y*y + z*z)}" ixy="0.0" ixz="0.0"
               iyy="${m / 12.0 * (x*x + z*z)}" iyz="0.0" 
               izz="${m / 12.0 * (x*x + y*y)}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>


  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0.0" ixz="0.0" iyy="${2.0*m*(r*r)/5.0}" iyz="0.0" izz="${2.0*m*(r*r)/5.0}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </xacro:macro>


  <material name="yellow">
    <color rgba="1 0.95 0 1"/>
  </material>
  <material name="blue">
    <color rgba="0 0 1 1"/>
  </material>
  <material name="light_blue">
    <color rgba="0 0.5 0.8 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="silver">
    <color rgba="0.79 0.82 0.93 1"/>
  </material>
  <material name="dark_grey">
    <color rgba="0.3 0.3 0.3 1"/>
  </material>

</robot>